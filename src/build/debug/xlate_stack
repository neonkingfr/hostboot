#!/usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/debug/xlate_stack $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2023
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

################################################################################
# simple usage:
#   xlate_stack -l hbicore.list -s "<-0x347F8<-0x4001574C<-0x4001CDC8"
################################################################################

use strict;
use warnings;
use Fcntl qw(SEEK_SET);

use bigint qw/hex/;
use File::Temp qw/tempfile/;
use Getopt::Long qw(:config no_ignore_case);

################################################################################
# getopts
################################################################################
unless (defined($ARGV[0])) {usage(); exit 0;}

GetOptions(
            "help|?"        => sub {usage(); exit 0;},
            "listing=s"     => \my $hbicore_list,
            "stack_addrs=s" => \my $stack_addrs,
            "rt_addr=s"     => \my $runtime_base_addr,
            "elf_dce=s"     => \my $dce_elf,
            "dce_listing=s" => \my $dce_list,
            "Verbosity=i"   => \my $verbosity)
   or die("Error in command line arguments\n");

################################################################################
# input parm checks
################################################################################
$hbicore_list      or die "Provide hbicore listing file.";
$stack_addrs       or die "Provide stack addrs.";
$verbosity         or $verbosity=0;
(-e $hbicore_list) or die("Could not find hbicore list file: $hbicore_list.");

if ($dce_list || $dce_elf)
{
    ($dce_elf && $dce_list) or die "If DCE, provide both DCE ELF and DCE list file.";
    -e $dce_list or die("Could not find DCE list file: $dce_list.");
}

################################################################################
# usage
################################################################################
sub usage
{
    print qq(-l [hbicore listing file]\n) .
          qq(-s [stack addrs]\n) .
          qq(-e [dce elf]\n) .
          qq(-d [dce listing file]\n) .
          qq(-r [runtime image addr]\n) .
          qq(    IF needed, from this trace:\n) .
          qq(     HBRT_TEST       | 135|Runtime image loaded @ <addr>\n);
    exit 0;
}

################################################################################
# search for the stack addr in $fh and print the function name when found
################################################################################
sub print_fcn_from_addr
{
    my ($fh, $addr) = @_;
    my $prev_addr;
    my $prev_info;
    my $found;

    foreach my $line (<$fh>)
    {
        chomp $line;
        my ($fn_addr, @info) = split / /, $line;
        if (hex($fn_addr) > $addr)
        {
            # found the function addr which is one function greater than
            #   where the stack addr is from, print the previous function
            printf "%-20X %-20s %s\n", $addr, $prev_addr, $prev_info;
            $found = 1;
            last;
        }
        $prev_addr = $fn_addr;
        $prev_info = join(' ', @info);
    }
    #reset to beginning of the tmp file for the next search
    seek $fh, 0, SEEK_SET;

    $found or printf "%-20X %-20s %s\n", $addr, " ", "NOT_FOUND";
}

################################################################################
# main
#  -pull all function names from HBI listing, with their addresses
#  -if DCE provided, pull all function names from DCE listing, with their addresses
#  -if stack_addr is out of range for the HBI listing
#     search in the DCE fcn list for the stack addr and print the fcn if found
#  -if a runtime base addr provided, modify the stack addr using the runtime addr
#  -search in the HBI fcn list for the stack addr and print the fcn if found
################################################################################
my ($hbi_fh, $tmp_file) = tempfile("xlate_stackXXXXXX", DIR => '/tmp/', UNLINK => 1);
my ($dce_fh, $tmp_dce_file) = tempfile("xlate_stack_dceXXXXXX", DIR => '/tmp/', UNLINK => 1);

# pull all of the functions from the HBI listing into a temp file
# This file lists all functions and their addrs in ascending order
system("grep ^00000000 $hbicore_list > $tmp_file");
($? eq 0) or die("Error pulling functions from HBI list file: $hbicore_list");

# pull all of the functions from the DCE listing into a temp file
# This file lists all functions and their addrs in ascending order
if ($dce_list)
{
    system("grep ^00000000 $dce_list > $tmp_dce_file");
    ($? eq 0) or die("Error pulling functions from DCE list file: $dce_list");
}

# loop through each of the stack addrs provided
foreach my $addr (split /<-/,$stack_addrs)
{
    $addr or next;

    my $hex_addr = hex($addr);

    # potentially bad stack addr
    if ($hex_addr > 0xffffffff)
    {
        # if a DCE elf was passed in, use it to modify the stack addr before giving up.
        if ($dce_elf and ($hex_addr > $dce_elf))
        {
            my $unmodified_addr = $hex_addr;
            $hex_addr -= hex($dce_elf);
            $verbosity and printf "$unmodified_addr - $dce_elf = %x\n", $hex_addr;
            print_fcn_from_addr($dce_fh, $hex_addr);
            next;
        }
        else
        {
            # just skip it
            printf "%-20s %-20s %s\n", $addr, " ", "OUT_OF_RANGE";
            next;
        }
    }

    # if a runtime offset was passed in, use it to modify the stack addr
    if ($runtime_base_addr)
    {
        my $rt_addr = hex($runtime_base_addr);
        if ($hex_addr > $rt_addr)
        {
            my $save = $hex_addr;
            $hex_addr -= $rt_addr;
            $verbosity and printf "$save - $runtime_base_addr = %x\n", $hex_addr;
        }
    }

    print_fcn_from_addr($hbi_fh, $hex_addr);
}

exit 0;
