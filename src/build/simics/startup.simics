
# Allow customization for capturing hostboot.simics.log
try {
    echo "Using hb_simics_log = "+$hb_simics_log
} except {
    # default to enabling
    $hb_simics_log = 1
    echo "Defaulting hb_simics_log = "+$hb_simics_log
}

@from datetime import datetime as dt
@simenv.save_name = dt.utcnow().strftime("%Y_%m%d_%H%M_%S%f")+'_UTC'

try {
    `os.system("cp hostboot.simics.log hostboot.simics.log.%s 2>/dev/null"%(simenv.save_name))`
} except {
    echo "WARN: hb_simics_log problem processing save of original hostboot.simics.log"
    local $error_msg = (get-error-message)
    local $error_file = (get-error-file)
    local $error_line_no = (dec (get-error-line))
    local $error_cmd = (get-error-command)
    echo "> get-error-message"
    echo $error_msg
    echo "> get-error-command"
    echo $error_cmd
    echo "> get-error-file"
    echo $error_file
    echo "> get-error-line"
    echo $error_line_no
}

if($hb_simics_log == 1) {
    start-command-line-capture hostboot.simics.log -overwrite -timestamp
    echo "Begin capture of simics log to hostboot.simics.log"
} else {
    echo "NO capture of simics log to hostboot.simics.log, to enable set hb_simics_log=1 in runsim"
}

# The directory of the startup.simics script. Any other necessary scripts/tools are located here.
# This path should be prepended to any lookup-file in the same directory
$hb_script_location = (lookup-file "%script%/")

# We need to add the script directory in the P10 simics model
add-directory $hb_script_location

#Display Simics Search Path
list-directories

$hb_startup_path = (lookup-file -query ($hb_script_location + "/startup.simics"))
$cur_path = (env PATH)
$cur_path = $cur_path+":"+$hb_script_location
python "os.environ['HB_TOOLPATH'] = \""+$hb_script_location+"\""
python "os.environ['PATH'] = \""+$cur_path+"\""

# Default to honoring MAGIC_BREAK
$hb_ignorebreak = 0

$hb_machine = "P10"
# Simics relies on hb_mode; hb_mode is 0 for Axone and beyond
$hb_mode = 0

# Whether we're trying to run in VPO mode or not
$vpo_compile = "0"
@if 'VPO_COMPILE' in os.environ: simenv.vpo_compile = "1"

python "os.environ['HB_MACHINE'] = \""+$hb_machine+"\""
echo "HB_MACHINE is: "+$hb_machine

$hb_masterproc = (get-master-procs)[0]
$hb_masterproc_cecchip = (get-master-cec-chips)[0]

echo "Master Proc is: "+$hb_masterproc
echo "Master Proc Cec-Chip is: "+$hb_masterproc_cecchip

# Choose a default core to start with
$hb_cpu = (get-master-cpus)[0]

if($vpo_compile == "1") {
    $hb_cpu = "system_cmp0.cpu0_0_01_0"
}

echo "Defaulting to CPU "+$hb_cpu+" for Hostboot tools"

# Prevent SBE Updates from happening on an IPL
echo "Altering SBE SEEPROM Versions to disable Update in IPL"

# Max sockets we'll see in P10 is 8, but $num_sockets is set in the simics config
$maxSockets=8
echo "Using num_sockets of "+$num_sockets+" out of max of "+$maxSockets
# At most two chips to a DCM (only 1 for SCM)
$maxChipsPerSocket=2
# SPI engines 0 and 1 are the SBE SEEPROMs
$spiEngines = [0,1]
foreach $socket in (range 0 $num_sockets) {
    foreach $chip in (range 0 $maxChipsPerSocket) {
        foreach $spiEngine in $spiEngines {
            $sbeSeeprom = (get-seeprom $socket $chip $spiEngine)
            if($sbeSeeprom != NIL) { ($sbeSeeprom).set 0x7FEDE 0x5A5A5A5A 8 -l }
        }
    }
}

# Load HB debug tools.
try {
    run-python-file (lookup-file -query ($hb_script_location + "/simics-debug-framework.py"))
}   except { echo "ERROR: Failed to load Simics debug framework (simics-debug-framework.py)" }
try {
    run-python-file (lookup-file -query ($hb_script_location + "/hb-simdebug.py"))
} except { echo "ERROR: Failed to load Hostboot debug tools (hb-simdebug.py)" }


## Build EECACHE

# Load EECACHE creation tool
#   need to always do this because some of the functions are used elsewhere
run-python-file (lookup-file -query ($hb_script_location + "/eecache-gen.py"))

$hb_skip_eecache = "0"
@if 'HB_SKIP_EECACHE' in os.environ: simenv.hb_skip_eecache = "1"

if defined bmc_files {
    if( $hb_skip_eecache == "1" ) {
        echo "Skipping build and load of EECACHE"
    } else if $bmc_files != NIL {
        #echo "Find eecache file name from: "+$bmc_files
        @simenv.eecache_file = find_eecache_file( simenv.bmc_files )

        # Create EECACHE file using version 2 (SPI/I2C version)
        # Note: this checks if eecache_file is None
        @eecache_gen( simenv.eecache_file, 2 )

        # generate file before looking it up here
        $hb_skip_eecache = 0;
        try {
            $eecache_file = (lookup-file $eecache_file)
            #echo "FOUND EECACHE: "+$eecache_file
        } except {
             echo "No eecache file found in bmc_files:"+$bmc_files+", skip EECACHE generation"
             $hb_skip_eecache = 1;
        }

        if ($hb_skip_eecache != 1) {
            @simenv.bmc_files = resolve_eecache_path( simenv.bmc_files, simenv.eecache_file )
            #echo "Resolved eecache path: "+$bmc_files

            # check if ECC needs to be added to the EECACHE file
            if defined eecacheEcc {
                # load ECC tools
                run-python-file (lookup-file -query ($hb_script_location + "/ecc.py"))

                # pad the eecache file to nearest 4K boundary
                @alignFileByValue( simenv.eecache_file, 4096 )

                # add ECC to the eecache file
                @injectECC( simenv.eecache_file, simenv.eecache_file )

                echo "Successfully created "+$eecache_file+" with ECC"
            } else {
                echo "Successfully created "+$eecache_file
            }
            @setMinFileSize( simenv.eecache_file, 0x2C0000 )
        }
    } else {
        echo "bmc_files is NIL, so no EECACHE auto generated"
    }
} else {
    echo "bmc_files not specified, so no EECACHE auto generated"
}


# Determine security state
$hw_security="1"
@simenv.hw_security = "1"
@if 'DISABLE_SECUREBOOT' in os.environ: simenv.hw_security = "0"
@if 'DISABLE_SECUREBOOT' in os.environ: hw_security = "0"

if(($hw_security != "1") and ($hw_security != "0")) {
    # Emit warning and assume default
    echo ("SECURITY: WARNING! Bad value "+
        $hw_security+" for HW security policy, defaulting to 0")
    $hw_security = "0"
}
echo "SECURITY: HW security policy set to "+$hw_security

# Translate security state to SIMICS jumper state
$jumperApplied=TRUE
if($hw_security == "1") {
    $jumperApplied=FALSE
}

if($vpo_compile == "0") { # no secureboot in VPO
    # Set logical jumper state in SIMICS based on HW policy
    #     "TRUE"=jumper applied(security disabled, default)
    #     "FALSE"=jumper removed(security enabled)

    # Load jumper state to the master processor
    $hb_masterproc.set-secure-jumper value = $jumperApplied

    # Load jumper state to all slave processors
    foreach $procS in ($hb_masterproc.get-slave-procs) {
        $procS.set-secure-jumper value = $jumperApplied
    }

}

# Populate default APSS power readings for the OCC
foreach $apss in (list-objects -all type = apss_device) {
    ($apss)->adc_channel_val = [0x00000293, 0x00000287, 0x00000887, 0x00000877, 0x00000326, 0x000002f2, 0x00000214, 0x00000006, 0x00000003, 0x00000eb7, 0x0000001b, 0x00000013, 0x00000123, 0x000000fc, 0x000000f2, 0x00000008]
}

if($vpo_compile == "1") {
    echo "Setting up for VPO mode"
    # Manually populate the SBE to HBBL communication area since SBE isn't running in VPO
    #
    # The "Jump forward x3000 instruction"
    system_cmp0.phys_mem.set address = 0xF0200000 size = 4 0x48003000
    # The version of SBE
    system_cmp0.phys_mem.set address = 0xF0200004 size = 4 0x00100001
    # 0th byte: sbeBootSide 1 byte:lpcConsoleEnable 3-4 byte: cacheSizeMB (4MB)
    system_cmp0.phys_mem.set address = 0xF0200008 size = 4 0x00000004
    # The size of the HBBL + 0x3000 offset
    system_cmp0.phys_mem.set address = 0xF020000c size = 8 0x9000
    system_cmp0.phys_mem.set address = 0xF0200014 size = 2 0x0900
    # 0th byte: numKeyAddrPair; 1-7 byte: start of the XSCOM BAR
    system_cmp0.phys_mem.set address = 0xF0200016 size = 8 0x080006
    system_cmp0.phys_mem.set address = 0xF020001e size = 2 0x03fc
    system_cmp0.phys_mem.set address = 0xF0200020 size = 8 0x00060300

    # Now force the HBBL, HBB, and PNOR images at their respective offsets into the L3 cache.
    $root = (env PROJECT_ROOT)

    (get-master-procs)[0].l3_img.load-file (lookup-file $root+"/standalone/pnor/hbbl.bin") 0x203000
    (get-master-procs)[0].l3_img.load-file (lookup-file $root+"/standalone/staging/hbicore.bin") 0x300000
    (get-master-procs)[0].l3_img.load-file (lookup-file $root+"/standalone/pnor/VPO.pnor") 0x400000

    # Set up to run on core 1 (for testing purposes)
    system_cmp0.cpu0_0_01_0->hrmor = 0xF0200000
    system_cmp0.cpu0_0_01_0->urmor = 0xF0200000
    system_cmp0.cpu0_0_01_0->iar = 0
    system_cmp0.cpu0_0_01_0.enable
    system_cmp0.cpu0_0_00_0.disable
    sim->frontend_current_processor = "system_cmp0.cpu0_0_01_0"

    # A workaround to allow PVR to be set correctly (otherwise thread 1 hangs)
    set-class-attr $proc_type pvr 0x809100
}

# Changing the base of HRMOR to 4GB - 256MB for all procs
foreach $proc in (get-all-procs) {
    # only set l3_base if SBE has not already done so, 0x08000000 is the invalid default
    # simics currently sets.
    if($proc->l3_base == 0x08000000)
    {
        echo "Setting l3_base 0xF0000000 on "+ $proc->name
        $proc->l3_base=0xF0000000
    }
}

#Enable extra processor support if asked to
try {
    #this access will fail if the runsim cmdline didn't specify anything
    echo "Multiproc Enablement = "+$hb_multiproc
} except {
    #default to 2proc for standalone config
    if ($machine_name == "p10_standalone" or $machine_name == "bonito") {
        $hb_multiproc = 1
    } else {
        $hb_multiproc = 0
    }
    @if 'HB_ENABLE_2PROC' in os.environ: simenv.hb_multiproc = 1
    echo "Multiproc Enablement = "+$hb_multiproc
}

#@FIXME-RTC:254475-Remove once this works everywhere
###Check for some workaround flags
try {
    echo "hb_ignoresmpfail = "+$hb_ignoresmpfail
} except {
    #default to ignoring known multiproc issues
    if( $hb_multiproc == 1 ) {
        $hb_ignoresmpfail = 1
    } else {
        $hb_ignoresmpfail = 0
    }
}
try {
    echo "hb_ignoretodfail = "+$hb_ignoretodfail
} except {
    #default to ignoring known multiproc issues
    if( $hb_multiproc == 1 ) {
        $hb_ignoretodfail = 1
    } else {
        $hb_ignoretodfail = 0
    }
}
try {
    echo "hb_skipocc = "+$hb_skipocc
} except {
    # Skip OCC enablement in the Bonito config because the temperature
    # polling interferes with the i2c use in our testcases
    if($machine_name == "bonito") {
        echo "Disabling OCC in Bonito config (override with '$hb_skipocc=0')"
        $hb_skipocc = 1
    } else {
        #default to running OCC
        $hb_skipocc = 0
    }
}

# Allow a user to enable Odyssey security that is normally disabled in simics
try {
    echo "hb_odysecurity = "+$hb_odysecurity
} except {
    #default to not being enabled
    $hb_odysecurity = 0
}

# Handle the SIMICS_MORECACHE environment variable, if set, and enable more
# backing caches
run-command-file (lookup-file -query ($hb_script_location + "/morecache.simics"))

#
# Always trigger our specific command files last
#
if($machine_name == "p10_standalone" or $machine_name == "bonito") {
    run-command-file (lookup-file -query ($hb_script_location + "/standalone.simics"))
} else {
    run-command-file (lookup-file -query ($hb_script_location + "/combined.simics"))
}

$use_odyssey = "0"
@if 'HB_USE_ODYSSEY' in os.environ: simenv.use_odyssey = "1"
