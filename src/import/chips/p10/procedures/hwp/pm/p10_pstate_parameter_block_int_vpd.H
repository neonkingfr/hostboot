/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/procedures/hwp/pm/p10_pstate_parameter_block_int_vpd.H $ */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2023                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
/// @file  p10_pstate_parameter_block_int_vpd.H
/// @brief Fake VPD for Parameter Block testing
///
/// *HWP HW Owner        : Greg Still <stillgs@us.ibm.com>
/// *HWP FW Owner        : Prasad Bg Ranganath <prasadbgr@in.ibm.com>
/// *HWP Team            : PM
/// *HWP Level           : 2
/// *HWP Consumed by     : HB
///
// EKB-Mirror-To: hostboot
// EKB-Mirror-To: hwsv

#ifndef __P10_PSTATE_PARAMETER_BLOCK_INT_VPD_H__
#define __P10_PSTATE_PARAMETER_BLOCK_INT_VPD_H__

#ifdef __INTERNAL_POUNDV__
// #V sample data
const uint8_t g_vpd_PVData[] =
{
    1,
// Curve Fit Points
//    C-Freq      VDDVLT     IDDTAC       IDDTDC      IDDRAC      IDDRDC      VCSVLT      ICSTAC      ICSTDC      ICSRAC      ICSRDC      CFGBSRT      VDDVMN      IVDDPP  TCPPT     IDDTDC      IDDRAC     SPARE
    0x07, 0xd0, 0x03, 0x84, 0x30, 0xd8, 0x12, 0xc4, 0x30, 0xd8, 0x12, 0xc4, 0x03, 0x84, 0x01, 0x8f, 0x02, 0xc4, 0x01, 0x8f, 0x02, 0xc4, 0x08, 0x20, 0x03, 0x24, 0x43, 0x9c, 0xaa, 0x01, 0x7c, 0x01, 0x00, 0x00, 0x00, //CF0
    0x08, 0x98, 0x03, 0x93, 0x36, 0xe5, 0x12, 0xf6, 0x36, 0xe5, 0x12, 0xf6, 0x03, 0x93, 0x01, 0xc0, 0x02, 0xc8, 0x01, 0xc0, 0x02, 0xc8, 0x08, 0xf0, 0x03, 0x31, 0x49, 0xdb, 0xaa, 0x01, 0xab, 0x01, 0x02, 0x00, 0x00, //CF1
    0x09, 0x60, 0x03, 0xa2, 0x3d, 0x2a, 0x13, 0x29, 0x3d, 0x2a, 0x13, 0x29, 0x03, 0xa2, 0x01, 0xf4, 0x02, 0xcd, 0x01, 0xf4, 0x02, 0xcd, 0x09, 0xc0, 0x03, 0x3e, 0x50, 0x53, 0xaa, 0x01, 0xdb, 0x01, 0x05, 0x00, 0x00, //CF2
    0x0a, 0x28, 0x03, 0xb1, 0x43, 0xa7, 0x13, 0x5d, 0x43, 0xa7, 0x13, 0x5d, 0x03, 0xb1, 0x02, 0x29, 0x02, 0xd2, 0x02, 0x29, 0x02, 0xd2, 0x0a, 0x90, 0x03, 0x4c, 0x57, 0x04, 0xaa, 0x02, 0x0e, 0x01, 0x08, 0x00, 0x00, //CF3
    0x0a, 0xf0, 0x03, 0xc0, 0x4a, 0x5d, 0x13, 0x91, 0x4a, 0x5d, 0x13, 0x91, 0x03, 0xc0, 0x02, 0x60, 0x02, 0xd7, 0x02, 0x60, 0x02, 0xd7, 0x0b, 0x60, 0x03, 0x59, 0x5d, 0xee, 0xaa, 0x02, 0x42, 0x01, 0x0a, 0x00, 0x00, //CF4
    0x0b, 0x54, 0x03, 0xcf, 0x4e, 0x97, 0x13, 0xc5, 0x4e, 0x97, 0x13, 0xc5, 0x03, 0xcf, 0x02, 0x82, 0x02, 0xdc, 0x02, 0x82, 0x02, 0xdc, 0x0b, 0xc8, 0x03, 0x67, 0x62, 0x5c, 0xaa, 0x02, 0x63, 0x01, 0x0d, 0x00, 0x00, //CF5
    0x0b, 0xb8, 0x03, 0xde, 0x52, 0xee, 0x13, 0xfa, 0x52, 0xee, 0x13, 0xfa, 0x03, 0xde, 0x02, 0xa5, 0x02, 0xe1, 0x02, 0xa5, 0x02, 0xe1, 0x0c, 0x30, 0x03, 0x74, 0x66, 0xe8, 0xaa, 0x02, 0x84, 0x01, 0x10, 0x00, 0x00, //CF6
    0x0c, 0x1c, 0x03, 0xe8, 0x56, 0xd2, 0x14, 0x1e, 0x56, 0xd2, 0x14, 0x1e, 0x03, 0xe8, 0x02, 0xc5, 0x02, 0xe4, 0x02, 0xc5, 0x02, 0xe4, 0x0c, 0x98, 0x03, 0x7d, 0x6a, 0xf0, 0xaa, 0x02, 0xa3, 0x01, 0x12, 0x00, 0x00, //CF7
// Static Rails
//    VDNVLT      IDNTAC      IDNTDC     VIOVLT       IIOTAC      IIOTDC      VPCIVLT      IPCITAC    IPCITDC      VAVDD     IAVDDTAC    IAVDDTDC    MDE    VDDMAX      VDDMIN    <       SPARE        >
    0x03, 0x84, 0x03, 0xd2, 0x00, 0xF4, 0x03, 0x84, 0x06, 0xba, 0x06, 0xba, 0x03, 0x52, 0x02, 0xfd, 0x02, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
// Other Rails
//    PAUFRQ      SSPTAR      VDNPOW      VIOPOW      PCIPOW      AVDDPOW     SSPACT       IDDRLT   VDDTWI  VCSTWI  VIOTWI  AMBTWI  MDINPLT
    0x07, 0xd0, 0x01, 0x5e, 0x00, 0x1b, 0x00, 0x0b, 0x00, 0x1f, 0x00, 0x0d, 0x0a, 0xb2, 0x10, 0x04,  0x0b,   0x02,   0x02,   0x03,  0x00,
//  RDPSPT  TDPSPT  WOFBSCFRQ    FFCFREQ   VDDPsavCoreF VDDCF6CoreF VDDFmaxCF  MMATemp  IOTTemp    FFMPT
    0xAA,   0xAA,  0x0b, 0x54, 0x07, 0xd0, 0x07, 0xD0,  0x0b, 0xb8, 0x0c, 0x1c, 0xbe,    0xa0,   0x00, 0xFA,
};
#endif // __INTERNAL_POUNDV__

#ifdef __WOF_INTERNAL_HEADER__
//// WOF sample data
const uint8_t g_wofData[] =
{
    // DW 0
    0x57, 0x46, 0x54, 0x48  /*MAGIC CODE WFTH*/,
    0x02, 0x04              /*Major Minor*/,
    0x64                    /*WOVCreditKnob*/,
    0x01                    /*Version*/,
    // DW 1
    0x00, 0x10              /*VRT block size*/,
    0x00, 0x04              /*VRT header size*/,
    0x00, 0x01              /*VRT data size*/,
    0x1                     /*OCS mode*/,
    0x20                    /*core count*/,//16
    // DW 2
    0x0C, 0xE4              /*Vcs start*/,
    0x0D, 0x05              /*Vcs step*/,
    0x00, 0x04              /*Vcs size*/,
    0x09, 0xC4              /*Vdd start*/,
    // DW 3
    0x01, 0xF4              /*Vdd step*/,
    0x00, 0x1A              /*Vdd size*/,
    0x0C, 0x35              /*Vratio start*/,
    0x02, 0x71              /*Vratio step*/,//16
    // DW 4
    0x00, 0x0C              /*Vratio size*/,
    0x13, 0x88              /*IO start*/,
    0x13, 0x88              /*IO step*/,
    0x00, 0x06              /*IO size*/,
    // DW 5
    0x00, 0x17              /*AC start*/,
    0x00, 0x02              /*AC step*/,
    0x00, 0x4               /*AC size*/,
    0x08, 0x02              /*Sort Throttle Freq  -- 2050 MHz*/,
    // DW 6
    0x01, 0x68              /*Socket Power - 360 W*/,
    0x0B, 0x54              /*Sort Power Target Freq - 2900 Mhz*/,
    0x01, 0xF4              /*RDP Curr - 500A */,
    0x01, 0x6D              /*Boost Curr - 365 A*/,
    // DW 7
    0x0                     /*TDP VCS Ceff index*/,
    0x0                     /*TDP VDD Ceff index*/,
    0x0                     /*TDP IO Powr index*/,
    0x0                     /*TDP Amb Cond index*/,
    0x0                     /*IO full Wattage*/,
    0x0                     /*IO Disabled wattage*/,
    0x0B, 0xEA              /*Sort UT Freq - 3050 Mhz*/,
    // DW 8
    0x00, 0x00, 0x00, 0x00  /*Table time stamp*/,
    0x0C, 0x1C              /*Override Match Freq - 3000 Mhz*/,
    0x01, 0x5E              /*Override Match Power - 350 W*/,
    // DW 9-10
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*Table version*/,
    // DW 11-12
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*Package name*/,
    // DW 13
    0x08, 0x02              /*Sort PS Freq - 2050 Mhz*/,
    0x0B, 0x86              /*Sort FF Freq - 2950 Mhz*/,
    0x01                    /*Balanced Performance Ceff Adjust Pct */,
    0x08                    /*Favor Performance Ceff Adjust Pct */,
    0x0A                    /*Favor Power Ceff Adjust Pct*/,
    0x10                    /*Non-Deterministic Ceff Adjust Pct*/,
    // DW 14
    0x0F, 0xA0              /*Balanced Performance Limit Freq MHz*/,
    0x0F, 0x3C              /*Favor Performance Limit Freq MHz*/,
    0x0D, 0xD8              /*Favor Power Ceff Limit Freq MHz*/,
    0x10, 0x04              /*Non-Deterministic Limit Freq MHz*/,
    // DW 15
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 /*Reserved 8B*/,
};
#endif // __WOF_INTERNAL_HEADER__

#ifdef __WOF_INTERNAL_DATA__
// These values are for dummy VPD having a 3100MHz UT frequency
const uint8_t g_static_vrt[] =
{
    //Index
    0x70,   //  0
    0x6f,   //  1
    0x6e,   //  2
    0x6d,   //  3
    0x6c,   //  4
    0x6b,   //  5
    0x58,   //  6
    0x54,   //  7
    0x50,   //  8
    0x4C,   //  9
    0x48,   //  10
    0x44    //  11
};


// These values are for parts having a 4000MHz UT frequency
const uint8_t g_static_vrt_hw[] =
{
    //Index
    0xb4,   //  0
    0xb4,   //  1
    0xb4,   //  2
    0xb4,   //  3
    0xb4,   //  4
    0xb2,   //  5
    0xac,   //  6
    0xa6,   //  7
    0xa1,   //  8
    0x9d,   //  9
    0x98,   //  10
    0x93    //  11
};
#endif // __WOF_INTERNAL_DATA__
#endif
