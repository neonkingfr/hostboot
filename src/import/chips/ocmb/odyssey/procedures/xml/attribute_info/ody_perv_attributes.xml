<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/import/chips/ocmb/odyssey/procedures/xml/attribute_info/ody_perv_attributes.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER HostBoot Project                                             -->
<!--                                                                        -->
<!-- Contributors Listed Below - COPYRIGHT 2022,2024                        -->
<!-- [+] International Business Machines Corp.                              -->
<!--                                                                        -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->
<attributes>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_HOTPLUG</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Select whether or not to run procedures in hotplug mode</description>
  <valueType>uint8</valueType>
  <enum>
    FALSE = 0x0,
    TRUE  = 0x1
  </enum>
  <default>0x0</default>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_HOTPLUG_MASK</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Mask of chiplets to participate in a hotplug operation, only used if ATTR_HOTPLUG == true.
    Each bit corresponds to one chiplet; if a bit is 1 that chiplet participates in the hotplug operation.
  </description>
  <valueType>uint64</valueType>
  <initToZero/>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_OCMB_REL_POS</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Defines the unique position of the OCMB chip
    relative to its connected host processor chip.  Should
    equal the chip unit position of the associated OMI
    channel on the processor.
  </description>
  <valueType>uint8</valueType>
  <writeable/>
  <initToZero/>
</attribute>
<!-- ******************************************************************** -->
<attribute>
  <id>ATTR_OCMB_PLL_BUCKET</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    PLL bucket selection
  </description>
  <valueType>uint8</valueType>
  <enum>TANK1600 = 0, TANK2000 = 1, TANK2400 = 2, RING2400 = 3, SIM0267 = 14, SIM2133 = 15</enum>
  <writeable/>
  <initToZero/>
</attribute>
<!-- ******************************************************************** -->
<attribute>
  <id>ATTR_OCMB_PLL_BUCKET_SIM</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Sim specific PLL bucket selection
  </description>
  <valueType>uint8</valueType>
  <enum>TANK1600 = 0, TANK2000 = 1, TANK2400 = 2, RING2400 = 3, SIM0267 = 14, SIM2133 = 15</enum>
  <writeable/>
  <default>SIM0267</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SIM_CHIPLET_MASK</id>
  <targetType>TARGET_TYPE_PROC_CHIP,TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Simulation attribute to enable the chiplets actually exist in model.
    To mark chiplet as present set corresponding chiplet ID bit position to 1 in 64 bit mask value.
  </description>
  <valueType>uint64</valueType>
  <default>0xFFFFFFFFFFFFFFFF</default>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SCAN0_SCAN_RATIO</id>
  <targetType>TARGET_TYPE_PROC_CHIP,TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    To choose scan ratio value for SCAN0 operation
  </description>
  <valueType>uint8</valueType>
  <writeable/>
  <default>0x0</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SPPE_BOOT_SIDE</id>
  <targetType>TARGET_TYPE_PROC_CHIP,TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Controls the SBE boot side, written to SB_CS prior to sbe boot
  </description>
  <valueType>uint8</valueType>
  <enum>
    SIDE0  = 0x0,
    SIDE1  = 0x1,
    GOLDEN = 0x2
  </enum>
  <platInit/>
  <initToZero/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_OCMB_BOOT_FLAGS</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Controls boot, platform behavior of OCMB SPPE

    Bits 0-1   : Boot indication
     - 0b00    : Autoboot
     - 0b01    : Pause for code update check, then autoboot
     - 0b10    : Boot to runtime, no code update check, no isteps
               :   Command table execution is controlled separately (hreset vs CBS)
     - 0b11    : Istep mode
    Bit 2      : Reserved
    Bit 3      : Conveys ATTR_IS_SIMULATION state (0=HW, 1=AWAN/MESA)
    Bit 4      : Emulate Security Enable (SAB Set )
    Bit 5      : Indicates that the SBE should not send back internal FFDC on any ChipOp failure response
    Bit 6      : Disable security, if permitted
    Bit 7      : Allow ATTR overrides in secure system
    Bits 8-10  : Reserved
    Bit 11     : Disable Scom Filtering
    Bit 12     : Disable Invalid Scom address check
    Bit 13     : Indicates MFG mode, where extra tests/isteps can be executed
    Bits 14-15 : Reserved
    Bit 16     : Enable ECDSA Signature enable (when not fused on)
    Bit 17     : Enable Dilithium Signature enable (when not fused on)
    Bit 18     : Enable ECID verification (when not fused on)
    Bit 19     : Enable HW key hash verification (when not fused on)
    Bit 20     : Enable file hash calculation (when not fused on)
    Bit 21     : Enforce matching security version for boot loader
    Bit 22     : Set Secure Boot Validity Verification. Force enables strict secure boot failure
    Bit 23     : Disable IOBist
    Bit 24     : Disable Abist
    Bit 25     : Disable Lbist
    Bit 26     : Enable Burn-In mode
    Bit 27     : Graceful terminate of any istep (via HWP if supported) â€“ only works when in imprint key mode
    Bit 28     : Force production Mode/ Production signed image.
    Bits 29-31 : Reserved
  </description>
  <valueType>uint32</valueType>
  <writeable/>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_ENABLE_LBIST</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
  Enable or Disable LBIST.
  This is to skip LBIST procedures if user elects
  </description>
  <valueType>uint8</valueType>
  <enum>DISABLE = 0x0,ENABLE = 0x1</enum>
  <writeable/>
  <default>ENABLE</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_ENABLE_ABIST</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
  Enable or Disable ABIST.
  This is to skip ABIST procedures if user elects
  </description>
  <valueType>uint8</valueType>
  <enum>DISABLE = 0x0,ENABLE = 0x1</enum>
  <writeable/>
  <default>ENABLE</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SECURITY_LEVEL</id>
  <targetType>TARGET_TYPE_OCMB_CHIP</targetType>
  <description>
    Reflects the boot security level of the given chip. This is purely informative and to be used by procedures
    to adjust their behavior, e.g. by disabling some debugging functions.
    This attribute is set by SBE during SBE boot flow. Once set by SBE the ATTR cannot be updated.
    Settings for a higher security level done in OTPROM will always take precedence over
    corresponding bits defined in scratch 11 for lab/test-only purposes.

    Level 0 - DISABLED   - Security disabled, SAB=0
    Level 1 - PERMISSIVE - Security enabled but not strictly enforced, SAB=1 but firmware signed with imprint keys
                           If this is set, then users can still override (set to 1) the default setting for allow-deny
                           list enable with bit 11 in scratch 11 to disable scom filtering but would
                           still get a chip-op error for such scoms.
    Level 2 - ENFORCING  - Security enabled and strictly enforced, SAB=1 and firmware signed with production keys
  </description>
  <valueType>uint8</valueType>
    <enum>
      DISABLED   = 0,
      PERMISSIVE = 1,
      ENFORCING  = 2
    </enum>
  <platInit/>
  <writeable/>
  <default>ENFORCING</default>
  <sbeAttrSync toSBE="0" fromSBE="1" chipTypes="ody">
    <targetTypes>TARGET_TYPE_OCMB_CHIP</targetTypes>
  </sbeAttrSync>
  <mrwHide/>
  <denyForSecurityUpdate/>
</attribute>
<!-- ********************************************************************** -->
</attributes>
